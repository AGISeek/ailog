#!/bin/bash
#
# This script installs the prepare-commit-msg hook for the watch-cursor extension.
# It should be run from the root of the user's project repository.

# Define the path for the hooks directory and the hook file
HOOKS_DIR=".git/hooks"
HOOK_FILE="$HOOKS_DIR/prepare-commit-msg"
PROJECT_ROOT=$(pwd)

# Ensure the .git/hooks directory exists
mkdir -p "$HOOKS_DIR"

# Create the hook script content
# This script is the "Human-in-the-loop" enforcer.
cat > "$HOOK_FILE" << 'EOF'
#!/bin/bash

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
COMMIT_HASH=$3

# Only run the hook for new commits, not for amends or rebases.
if [ "$COMMIT_SOURCE" != "message" ] && [ "$COMMIT_SOURCE" != "" ]; then
    exit 0
fi

# Path to the log file generated by the VS Code extension.
# It must be relative to the repository root.
LOG_FILE=".git/ai_activity.log"

# If the log file doesn't exist, there's nothing to do.
if [ ! -f "$LOG_FILE" ]; then
    exit 0
fi

# Get a list of files that are staged for this commit.
STAGED_FILES=$(git diff --cached --name-only)

if [ -z "$STAGED_FILES" ]; then
    # No files staged, so no AI code to attribute.
    # Clean up the log file for the next commit and exit.
    > "$LOG_FILE"
    exit 0
fi

AI_DETECTED=false
# Read the log file line by line. Each line is a JSON object.
while IFS= read -r line; do
    if [ -z "$line" ]; then
        continue
    fi

    # Extract the file path from the JSON line. Using grep and sed to avoid jq dependency.
    logged_file_path=$(echo "$line" | grep -o '"fsPath":"[^"]*' | sed 's/"fsPath":"//')
    
    # Check if the logged file is in the list of staged files.
    for staged_file in $STAGED_FILES; do
        # Check if the staged file path contains the logged file path.
        # This handles cases where paths might be relative vs absolute.
        if [[ "$logged_file_path" == *"$staged_file"* ]]; then
            AI_DETECTED=true
            break 2 # Break out of both loops
        fi
    done
done < "$LOG_FILE"

# IMPORTANT: Clean up the log file *after* checking it, so that past AI activity
# doesn't affect future commits.
> "$LOG_FILE"

if [ "$AI_DETECTED" = true ]; then
    # Connect the script to the user's terminal
    exec < /dev/tty
    
    echo ""
    echo "[AI Assistant] AI-generated code detected in this commit."
    read -p "> Do you want to add 'Co-authored-by: Cursor AI <cursor-ai@yourcompany.com>' to this commit? (Y/n) " -n 1 -r
    echo "" # Move to a new line

    # If the user presses Y, y, or just Enter, add the co-author line.
    if [[ $REPLY =~ ^[Yy]$ ]] || [ -z "$REPLY" ]; then
        # Add a couple of newlines for separation and then the co-authored-by line.
        echo -e "\n\nCo-authored-by: Cursor AI <cursor-ai@yourcompany.com>" >> "$COMMIT_MSG_FILE"
        echo "Attribution added."
    else
        echo "Attribution skipped."
    fi
fi

exit 0
EOF

# Make the hook executable
chmod +x "$HOOK_FILE"

echo "âœ… Git hook installed successfully at $PROJECT_ROOT/$HOOK_FILE"
echo "You can now test the workflow by generating code with Cursor, staging it, and running 'git commit'."
